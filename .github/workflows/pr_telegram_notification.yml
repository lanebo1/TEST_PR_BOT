name: PR Telegram Notification

on:
  pull_request:
    types: [opened, edited, closed, reopened, ready_for_review, review_requested]

jobs:
  notify:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install requests
        run: pip install requests

      - name: Send or Update Telegram Message
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          PR_ACTION: ${{ github.event.action }}
          PR_TITLE: ${{ github.event.pull_request.title }}
          PR_AUTHOR: ${{ github.event.pull_request.user.login }}
          PR_HEAD_REF: ${{ github.event.pull_request.head.ref }}
          PR_BASE_REF: ${{ github.event.pull_request.base.ref }}
          PR_URL: ${{ github.event.pull_request.html_url }}
          PR_ASSIGNEES: ${{ join(github.event.pull_request.assignees.*.login, ', ') }}
          PR_REVIEWERS: ${{ join(github.event.pull_request.requested_reviewers.*.login, ', ') }}
          PR_MERGED: ${{ github.event.pull_request.merged }}
          PR_BODY: ${{ github.event.pull_request.body }}
        run: |
          cat << 'EOF' > telegram_updater.py
          import os
          import requests
          import json
          import re
          from datetime import datetime
          
          TOKEN = os.environ['TELEGRAM_BOT_TOKEN']
          CHAT_ID = os.environ['TELEGRAM_CHAT_ID']
          PR_NUMBER = os.environ['PR_NUMBER']
          PR_URL = os.environ['PR_URL']
          
          def escape_markdown(text):
              """Escape special characters for Telegram Markdown"""
              if not text:
                  return text
              # Escape underscores, asterisks, backticks, and square brackets
              text = text.replace('_', '\\_')
              text = text.replace('*', '\\*')
              text = text.replace('`', '\\`')
              text = text.replace('[', '\\[')
              text = text.replace(']', '\\]')
              return text
          
          def get_message_title(action, merged):
              titles = {
                  'opened': 'üîî New Pull Request Created!',
                  'edited': '‚úèÔ∏è Pull Request Updated!',
                  'reopened': 'üîÑ Pull Request Reopened!',
                  'ready_for_review': 'üëÄ Pull Request Ready for Review!',
                  'review_requested': 'üìù Review Requested!'
              }
              
              if action == 'closed':
                  return 'üéâ Pull Request Merged!' if merged == 'true' else '‚ùå Pull Request Closed!'
              
              return titles.get(action, 'üì¨ Pull Request Activity!')
          
          def create_message():
              action = os.environ['PR_ACTION']
              merged = os.environ['PR_MERGED']
              title = get_message_title(action, merged)
              assignees = os.environ['PR_ASSIGNEES'] or 'None'
              reviewers = os.environ['PR_REVIEWERS'] or 'None'
              
              # Escape markdown in dynamic fields
              escaped_title = escape_markdown(os.environ['PR_TITLE'])
              escaped_author = escape_markdown(os.environ['PR_AUTHOR'])
              escaped_body = escape_markdown(os.environ['PR_BODY']) if os.environ['PR_BODY'] else 'No description provided'
              escaped_head_ref = escape_markdown(os.environ['PR_HEAD_REF'])
              escaped_base_ref = escape_markdown(os.environ['PR_BASE_REF'])
              
              status_line = ''
              if action == 'closed':
                  if merged == 'true':
                      status_line = '\nüéØ **Status:** Merged'
                  else:
                      status_line = '\n‚ùå **Status:** Closed without merging'
              
              return f"""{title}
          
          üìã **Title:** {escaped_title}
          üë§ **Author:** {escaped_author}
          üåø **Branch:** {escaped_head_ref} ‚Üí {escaped_base_ref}
          üîó **URL:** {PR_URL}
          üë• **Assignees:** {assignees}
          üëÄ **Reviewers:** {reviewers}{status_line}
          
          üìù **Description:**
          {escaped_body}
          
          üïê **Last Updated:** {datetime.now().isoformat()}
          
          üîç **TELEGRAM\\_BOT\\_PR\\_{PR_NUMBER}\\_IDENTIFIER**"""
          
          def find_existing_message():
              """Find existing message for this PR by searching recent messages"""
              # Try multiple approaches to find the message
              message_id = None
              
              # Method 1: Search in getUpdates
              message_id = search_in_updates()
              if message_id:
                  return message_id
              
              # Method 2: Try with different offset values
              for offset in [0, -50, -100]:
                  message_id = search_in_updates(offset)
                  if message_id:
                      return message_id
              
              print(f"Could not find existing message for PR #{PR_NUMBER}")
              return None
          
          def search_in_updates(offset=0):
              """Search for PR message in Telegram updates"""
              try:
                  url = f'https://api.telegram.org/bot{TOKEN}/getUpdates'
                  params = {'limit': 100}
                  if offset != 0:
                      params['offset'] = offset
                  
                  response = requests.get(url, params=params)
                  updates = response.json()
                  
                  if not updates.get('ok'):
                      print(f"Failed to get updates with offset {offset}: {updates}")
                      return None
                  
                  # Look for messages containing this PR identifier
                  pr_identifier = f"TELEGRAM_BOT_PR_{PR_NUMBER}_IDENTIFIER"
                  chat_id_int = int(CHAT_ID)
                  
                  print(f"Searching for PR identifier: {pr_identifier} (offset: {offset})")
                  
                  results = updates.get('result', [])
                  print(f"Found {len(results)} updates to check")
                  
                  for update in reversed(results):
                      if 'message' in update:
                          message = update['message']
                          message_chat_id = message.get('chat', {}).get('id')
                          message_text = message.get('text', '')
                          message_id = message.get('message_id')
                          
                          if message_chat_id == chat_id_int and pr_identifier in message_text:
                              print(f"Found existing message with ID: {message_id}")
                              return message_id
                  
                  return None
              except Exception as e:
                  print(f"Error searching updates with offset {offset}: {e}")
                  return None
          
          def main():
              action = os.environ['PR_ACTION']
              print(f"Processing action: {action} for PR #{PR_NUMBER}")
              
              if action == 'opened':
                  # Only send message when PR is opened
                  message = create_message()
                  print("Sending new message for 'opened' action...")
                  send_new_message(message)
              else:
                  print(f"Action is '{action}' - no message will be sent (only 'opened' triggers messages)")
          
          def send_new_message(message):
              """Send a new Telegram message"""
              print("Attempting to send new message...")
              send_url = f'https://api.telegram.org/bot{TOKEN}/sendMessage'
              send_data = {
                  'chat_id': CHAT_ID,
                  'text': message,
                  'parse_mode': 'Markdown',
                  'disable_web_page_preview': True
              }
              
              try:
                  response = requests.post(send_url, json=send_data)
                  result = response.json()
                  
                  if result.get('ok'):
                      print('New message sent successfully')
                      print(f'Message ID: {result.get("result", {}).get("message_id")}')
                  else:
                      print(f'Failed to send message: {result}')
              except Exception as e:
                  print(f'Error sending message: {e}')
          
          if __name__ == '__main__':
              main()
          EOF
          
          python telegram_updater.py 